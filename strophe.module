<?php
/**
 * Implementation of hook_init().
 */
function strophe_init() {
  $js = array('b64', 'chat', 'md5', 'sha1', 'strophe', 'poem', 'drupal');
  foreach($js as $j){
    drupal_add_js(drupal_get_path('module', 'strophe') ."/js/$j.js");
  }
}

function strophe_menu() {
  $items['admin/settings/strophe'] = array(
    'description' => 'Chat with XMPP over HTTP',
    'title' => 'Chat with bosh',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('strophe_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    );
  return $items;
}

function strophe_admin_settings() {
  $form['strophe_jabber'] = array(
    '#title' => t('XMPP'),
    '#type' => 'fieldset',
    '#description' => t('XMPP settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['strophe_jabber']['strophe_bosh_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Url of BOSH service',
    '#default_value' => variable_get('strophe_bosh_url', '/http-bind'),
    '#description' => t("URL of the BOSH service for jabber HTTP binding"),
  );
  $form['strophe_jabber']['strophe_domain'] = array(
    '#type' => 'textfield',
    '#title' => 'Domain for XMPP',
    '#default_value' => variable_get('strophe_domain', 'jabber.org'),
    '#description' => t(""),
  );
  $form['strophe_jabber']['strophe_place'] = array(
    '#type' => 'textfield',
    '#title' => 'Place for XMPP',
    '#default_value' => variable_get('strophe_place', 'Drupal_Strophe_Client'),
    '#description' => t("XMPP user can be connected more than one times, with different place (the name of the client, or the name of the place where is the chatter is)"),
  );
  $form['strophe_default_room'] = array(
    '#type' => 'textfield',
    '#title' => 'Default room name',
    '#default_value' => variable_get('strophe_default_room', 'drupal'),
    '#description' => t("Name of the default MUC (Multi User Chatroom)"),
    
  );
  $form['strophe_bot'] = array(
    '#title' => t('Bot'),
    '#type' => 'fieldset',
    '#description' => t('The bot of this website'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['strophe_bot']['strophe_bot_user'] = array(
    '#type' => 'textfield',
    '#title' => 'Default room name',
    '#default_value' => variable_get('strophe_bot_user', 'admin'),
    '#description' => t("Bot user, should be admin your ejabberd.cfg"),
    
  );
  $form['strophe_bot']['strophe_bot_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Default room name',
    '#default_value' => variable_get('strophe_bot_name', 'The bot'),
    '#description' => t("Name of the bot"),
    
  );
  return system_settings_form($form);
}

class strophe_chatroom {
  function __construct($jid, $passwd) {
    $this->jid = $jid;
    $this->passwd = $passwd;
    $this->bosh_service = variable_get('strophe_bosh_url', '/http-bind');
    $this->lines = 5;
    $this->default_room = 'conference@conference.'. variable_get('strophe_domain', 'jabber.org');
  }
}

function strophe_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Chat room'),
        'cache' => BLOCK_NO_CACHE,
      );
      $blocks[1] = array(
        'info' => t('Connected chatters'),
        'cache' => BLOCK_NO_CACHE,
      );
      return $blocks;
    case 'configure':
      if ($delta == 0) {
          $form['strophe_block_num_lines'] = array(
            '#type' => 'textfield',
            '#title' => t('Number of chat line to display'),
            '#default_value' => variable_get('strophe_block_num_lines', 5),
          );
      }
      $form['strophe_block_room'] = array(
        '#type' => 'textfield',
        '#title' => t('Room name'),
        '#default_value' => variable_get('strophe_block_room_' .$delta, 'conference'),
        );
      return $form;
    case 'save':
      variable_set('strophe_block_num_lines_' .$delta, (int)$edit['strophe_block_num_lines']);
      break;
    case 'view':
      global $user;
      if(0 == $user->uid) {
        return;
      }
      if($delta == 0) {
        include_once drupal_get_path('module', 'ejabberd_auth') . '/drupalAuth.inc';
        $jid = $user->name . '@' . variable_get('strophe_domain', 'jabber.org') .'/'. variable_get('strophe_place', 'Drupal_Strophe_Client');
        $block['subject'] = t('The chat room');
        $room = new strophe_chatroom($jid, ejabberd_auth_hash($user->name));
        $room->lines = variable_get('strophe_block_num_lines_' .$delta, 5);
        $room->room = variable_get('strophe_block_room_' .$delta, 'conference');
        $block['content'] = theme('strophe_chat_room', $room);
        return $block;
      }
  }
  
}

/**
 * Implementation of hook_theme
 */
function strophe_theme() {
  $path = drupal_get_path('module', 'strophe');
  return array(
    'strophe_chat_room' => array(
      'path' => "$path/theme",
      'template' => 'strophe_chat_room',
      'arguments' => array('chatroom' => NULL)),
  );
}